package ${packageName}.service.impl;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.oner365.common.cache.annotation.RedisCacheAble;
import com.oner365.common.cache.annotation.RedisCachePut;
import com.oner365.common.constants.PublicConstants;
import com.oner365.common.enums.ResultEnum;
import com.oner365.common.enums.StatusEnum;
import com.oner365.common.exception.ProjectRuntimeException;
import com.oner365.common.page.PageInfo;
import com.oner365.common.query.QueryCriteriaBean;
import com.oner365.common.query.QueryUtils;
import ${packageName}.dao.I${ClassName}Dao;
import ${packageName}.dto.${ClassName}Dto;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import ${packageName}.vo.${ClassName}Vo;
import com.oner365.util.DataUtils;
#foreach ($column in $columns)
#if($column.columnName == 'id')
#set($AttrName=$column.javaType)
#end
#end

/**
 * ${functionName} Service 实现类
 * 
 * @author ${author}
 *
 */
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(${ClassName}ServiceImpl.class);

    private static final String CACHE_NAME = "${ClassName}";
    
    @Autowired
    private I${ClassName}Dao dao;
    
    @Override
    @Cacheable(value = CACHE_NAME, keyGenerator = PublicConstants.KEY_GENERATOR)
    public PageInfo<${ClassName}Dto> pageList(QueryCriteriaBean data) {
        try {
            return convertDto(dao.findAll(QueryUtils.buildCriteria(data), QueryUtils.buildPageRequest(data)));
        } catch (Exception e) {
            LOGGER.error("Error pageList: ", e);
        }
        return null;
    }

    @Override
    @Cacheable(value = CACHE_NAME, keyGenerator = PublicConstants.KEY_GENERATOR)
    public List<${ClassName}Dto> findList(QueryCriteriaBean data) {
        try {
            if (data.getOrder() == null) {
                return convertDto(dao.findAll(QueryUtils.buildCriteria(data)));
            }
            return convertDto(dao.findAll(QueryUtils.buildCriteria(data), QueryUtils.buildSortRequest(data.getOrder())));
        } catch (Exception e) {
            LOGGER.error("Error findList: ", e);
        }
        return Collections.emptyList();
    }
    
    @Override
    @RedisCacheAble(value = CACHE_NAME, key = PublicConstants.KEY_ID)
    public ${ClassName}Dto getById($AttrName id) {
        try {
            Optional<${ClassName}> optional = dao.findById(id);
            if (optional.isPresent()) {
                return convertDto(optional.orElse(null));
            }
        } catch (Exception e) {
            LOGGER.error("Error getById: ", e);
        }
        return null;
    }

    @Override
    @Transactional(rollbackFor = ProjectRuntimeException.class)
    @RedisCachePut(value = CACHE_NAME, key = PublicConstants.KEY_ID)
    @CacheEvict(value = CACHE_NAME, allEntries = true)
    public ${ClassName}Dto save(${ClassName}Vo vo) {
        ${ClassName} entity = toPojo(vo);
        if (DataUtils.isEmpty(entity.getId())) {
        	entity.setStatus(StatusEnum.YES.getCode());
            entity.setCreateTime(LocalDateTime.now());
        }
        entity.setUpdateTime(LocalDateTime.now());
        return convertDto(dao.save(entity));
    }
    
    @Override
    @Transactional(rollbackFor = ProjectRuntimeException.class)
    @CacheEvict(value = CACHE_NAME, allEntries = true)
    public int deleteById($AttrName id) {
        dao.deleteById(id);
        return ResultEnum.SUCCESS.getCode();
    }
    
    private ${ClassName} toPojo(${ClassName}Vo vo) {
        ${ClassName} result = new ${ClassName}();
#foreach ($column in $columns)
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
        result.set${AttrName}(vo.get${AttrName}());
#end        
        return result;
    }

}
